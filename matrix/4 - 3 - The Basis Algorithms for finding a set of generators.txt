

So, the first question that we're 
going to study is for a given vector 
space, what is the minimum number of 
vectors whose span equals that vector 
space? 
What's the minimum size of a set of 
generators? 
Now, there are two natural algorithmic 
strategies that you might try to find a 
minimum size set of generators. 
Here is one, I call it the grow 
algorithm. 
Given a vector space, initialize your set 
to the empty set. 
And repeat, as long as it's possible. 
Choose a vector in the vector space 
that's not already spanned by the vectors 
in S. 
And add that vector to S. 
Repeat that until there are no longer any 
vectors in the vector space. 
They're outside the span of S. 
At that point, you've got a set S that 
spans the given vector space. 
The question is, does this really give 
you the smallest generating set for the 
vector space V? 
Another question that we'll have to get 
to is, can this algorithm be made to 
stop? 
Does it ever terminate? 
Here's an alternative approach. 
I call it the shrink algorithm. 
Given a vector space, it initializes S to 
some finite set of vectors that spans the 
vector space, and then repeats, as long 
as possible. 
Find a vector already in S, such that the 
span of the set of vectors obtained by 
removing the vector from S is the same, 
it's still the vector space. 
And then, just remove the vector. 
So, we're shrinking down the set S. 
The algorithm stops at the point when 
removing a vector from S would result in 
not spanning the original vector space. 
So, at the point that the algorithm 
terminates, if it terminates, the span of 
s is the vector space V. 
The question is, is this set of 
generators a smallest possible set of 
generators for the vector space? 
There's an additional question of how we 
do the initialization. 
We're given two algorithms, the grow 
algorithm and the shrink algorithm, for 
finding a set of generators. 
Is it obvious that each of these 
algorithms finds the smallest set of 
generators? 
Let's look at examples from a problem in 
graphs. 
So, here's a graph. 
The points are called nodes or vertices 
and the links are called edges. 
Each edge has two endpoints. 
So, for example, this edge's endpoints 
are these two nodes. 
The two end points of an edge are called 
neighbors. 
Now, a dominating set in a graph is a set 
S of nodes such that every node is either 
an S or is a neighbor of a node in S. 
So, for example, the set of nodes I've 
circled here is a dominating set. 
Our goal is to find a smallest dominating 
set in a graph. 
And here's one possible algorithm. 
The Grow Algorithm.You initialize the set 
S to be the empty set, and While S is not 
a dominating set, we add a node to S. 
So, we might start by adding say this 
node. 
It's not a dominating set yet, so we 
might choose to add, say this node. 
At this point, we've got a dominating 
set. 
Every node is either in the set, or a 
neighbor of a node in the set. 
So you we can stop. 
But did this algorithm give us a minimum 
size dominating set? 
It turns out that, no, we could have 
gotten a much smaller dominating set 
consisting, say just of this note. 
So, in this case, this greedy algorithm, 
the Grow Algorithm, came up with the 
wrong answer. 
It didn't come up with the smallest 
solution. 
An alternative is the Shrink Algorithm, 
which initializes S to be the set of all 
nodes and takes away nodes as long as 
taking them away leaves you with a 
dominating set. 
Similarly, this algorithm can also fail 
to find a smallest dominating set. 
So, algorithms like Grow and Shrink don't 
always find you the smallest solution. 


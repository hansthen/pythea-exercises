

Compression of images. 
Say you want to store or transmit some 
large images. 
How do we represent the image compactly 
so it's more efficiently stored or 
transmitted? 
Once obvious representation of an image, 
a 2 megapixel image, is to represent each 
pixel by a number. 
That's straight forward. 
Can we do any better? 
One idea, this is BR Strategy 1, is to 
use sparsity. 
So we find the nearest k-sparse vector. 
We'll talk later about what it means to 
be the nearest k-sparse vector. 
For now, I'll say that the method for 
doing that involves suppressing all but 
the largest k entries. 
Well, here's the result, it's not a very 
good reproduction of the original image. 
You lose a lot of detail by suppressing 
all but say, the top 10% of the pixels. 
Are there better strategies that we can 
use? 
Here's another idea. 
We represent an image vector by its 
coordinate representation with respect to 
some set of generators. 
So we select a set of generators say v1 
through vn and we replace each image 
vector with its coordinate 
representation. 
Now, for this strategy to be useful, we 
need to ensure, first of all, that every 
image vector is a linear combination of 
the vectors v one through v n. So more 
generally, this is the question, how can 
we tell given some vectors. 
V1 though vn, whether every vector can be 
written as a linear combination of these 
vectors. 
How do we tell whether these vectors are 
in fact generators? 
We also need the number of vectors to be 
small because that way the number of 
entries in the coordinate representation 
will be small. 
This raises the question how can we find 
a smallest possible set of generators? 
For the vector space. 
It turns out that that strategy doesn't 
work well either. 
You can't get a small enough set of 
vectors that still generate the whole 
space, but here's a third strategy that 
works quite well. 
As before, we select some vectors that 
span the whole vector space. 
For each image to compress, we view it as 
a vector and we finds its coordinate 
representation in terms of these 
generators. 
Now, we replace that. 
Coordinate representation with another 
vector that's k-sparse. 
Again we supress all but the k-largest 
entries. 
We'll call that U tilde. 
And the compact representation is the 
vector u tilde. 
It's compact because it's sparse, so we 
only need to store the non-zero entries. 
Now, once we need to recover an image, we 
can do that by calculating the 
corresponding linear combination of the 
generators. 
Of course, the resulting image won't be 
identical to the original image. 
But it actually looks quite good. 
So here's the image we obtained using 
that first strategy. 
Just suppressing the pixels whose values 
were not among the k largest. 
And here's the result of using this 
hybrid strategy which I just described. 


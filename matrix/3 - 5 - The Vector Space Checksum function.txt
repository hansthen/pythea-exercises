

Now we're going to look at, a simple 
application of these ideas. 
If you go and download Python, you'll see 
these, these numbers to the left of the 
different downloads. 
These are checksums. 
A checksum function maps long files to 
short sequences to enable you to check 
whether a file you've downloaded, has 
been corrupted. 
So, the webpage shows the checksums of 
the files you can download. 
If you download a file, you run the 
checksum function on it. 
And now, if the result of running the 
checksum function on the files you 
downloaded isn't the same as the result 
posted on the website, you know the 
file's being corrupted en route. 
But what about the other way around? 
Could it be that the file is corrupted 
but you don't detect it by running the 
checksum It could happen, but how likely 
is it? 
We're going to use a sort of toy 
checksum, to illustrate some of the ideas 
we've been exploring. 
So the checksum function looks like this. 
We're going to represent a file as an end 
vector over gf2. 
That is an end bit sequence. 
And the function will be a 64 vector over 
g f two. 
Where the first entry is a1.x. 
The second entry is a2.x and so on. 
So and where a one through a64 are 
vectors we chose somehow. 
So here's our checksum function. 
It takes an n vector x over GF (2) and it 
outputs the dot products a1 dot x, a2 dot 
x upto a64 dot x where a1 through a64 are 
vectors we choose somehow. 
Now let's use p to denote the original 
file, and say it is randomly corrupted 
during the download process. 
What's the probability that that 
corruption went undetected? 
Here's the checksum of the original file. 
The first bit is a1.p. 
And we'll denote that by beta one, and so 
on. 
Now lets write the corrupted. 
Version as p plus e. 
Remember, we're doing GF(2) addition, so 
in this case, e has 1s precisely at the 
positions in in the file that were 
changed during the download process. 
Then, the checksum of the corrupted file 
matches the checksum of the original file 
if and only if the first bit mathes. 
A1.p plus e equals beta one. 
The second matches and so on down to the 
64. 
That, that's true if and only if the 
difference between the first bit of the 
original, of the checksum of the original 
file and the first bit of the checksum of 
the downloaded file is zero, and so on. 
And that's true if and only if the error 
vector satisfies these equations. 
A1.e equals zero through A.64 equals 
zero. 
In other words, if e is a solution to the 
homogenous linear system, A1.x equals 
zero through a.64.x equals zero. 

